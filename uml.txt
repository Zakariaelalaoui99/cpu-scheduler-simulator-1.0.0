%% CPU Scheduling Simulator â€” Clean Mermaid UML

classDiagram
direction LR

%% ===== UI Layer =====
class MainWindow {
  +MainWindow()
  +~MainWindow()
  +showProcesses()
  +displayResult()
  +displayGantt()
  --
  +signal processCreated
  +signal runRequested
  +signal algorithmSelected
  +signal clearProcessesRequested
  +signal contextSwitchChanged
  +signal modeSelected
  +signal threadQuantumChanged
  --
  +slot onAddProcess
  +slot onRun
  +slot onClear
  +slot onAlgorithmChanged
  +slot onQuantumChanged
  +slot onModeChanged
  +slot onThreadQuantumChanged
  +slot onContextSwitchChanged
}

class GanttChartWidget {
  +GanttChartWidget()
  +setGantt()
}

class Controller {
  +Controller()
  +handleProcessCreation()
  +handleAlgorithmSelection()
  +handleExecution()
  +handleClearProcesses()
  +handleContextSwitchChanged()
  +handleModeSelected()
  +handleThreadQuantumChanged()
}

MainWindow --> Controller : emits signals to
MainWindow --> GanttChartWidget : shows timeline in
Controller --> Scheduler : drives

%% ===== Core Scheduling Engine =====
class Scheduler {
  +Scheduler()
  +setAlgorithm()
  +setContextSwitch()
  +contextSwitch()
  +setMode()
  +mode()
  +setThreadQuantum()
  +threadQuantum()
  +addProcess()
  +removeProcess()
  +addThreadToProcess()
  +clear()
  +execute()
  +getResults()
  +getGantt()
}

class SchedulerMode {
  <<enumeration>>
  +ProcessOnly
  +ThreadKernel
  +ThreadUser
}

Scheduler ..> SchedulerMode

class SchedulingAlgorithm {
  <<interface>>
  +execute()
  +getName()
}

class FCFS {
  +execute()
  +getName()
}

class SJF {
  +execute()
  +getName()
}

class RR {
  -quantum
  +RR()
  +execute()
  +getName()
}

class RRP {
  -quantum
  +RRP()
  +execute()
  +getName()
}

Scheduler --> SchedulingAlgorithm : uses
SchedulingAlgorithm <|.. FCFS
SchedulingAlgorithm <|.. SJF
SchedulingAlgorithm <|.. RR
SchedulingAlgorithm <|.. RRP

%% ===== Data Models =====
class Process {
  +Process()
  +getPid()
  +setPid()
  +getArrivalTime()
  +setArrivalTime()
  +getBurstTime()
  +setBurstTime()
  +getCompletionTime()
  +setCompletionTime()
  +getTurnaroundTime()
  +setTurnaroundTime()
  +getWaitingTime()
  +setWaitingTime()
  +getPriority()
  +setPriority()
  +addThread()
  +getThreads()
  +totalThreadBurst()
}

class Thread {
  +Thread()
  +getTid()
  +setTid()
  +getArrivalTime()
  +setArrivalTime()
  +getBurstTime()
  +setBurstTime()
  +getRemaining()
  +setRemaining()
  +getCompletionTime()
  +setCompletionTime()
  +getTurnaroundTime()
  +setTurnaroundTime()
  +getWaitingTime()
  +setWaitingTime()
  +getPriority()
  +setPriority()
}

class GanttEntry {
  +pid
  +start
  +end
  +tid
}

%% ===== Relationships =====
Scheduler --> Process : produces results
Scheduler --> GanttEntry : produces timeline
Process "1" o-- "many" Thread
Process "1" o-- "many" GanttEntry : via pid/tid
